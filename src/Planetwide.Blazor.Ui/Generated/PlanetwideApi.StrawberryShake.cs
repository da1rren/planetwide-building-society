// <auto-generated/>
#nullable enable

namespace Microsoft.Extensions.DependencyInjection
{
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.9.0.0")]
    public static partial class PlanetwideApiServiceCollectionExtensions
    {
        public static global::StrawberryShake.IClientBuilder<global::Planetwide.Blazor.Ui.Data.Api.State.PlanetwideApiStoreAccessor> AddPlanetwideApi(this global::Microsoft.Extensions.DependencyInjection.IServiceCollection services, global::StrawberryShake.ExecutionStrategy strategy = global::StrawberryShake.ExecutionStrategy.NetworkOnly)
        {
            var serviceCollection = new global::Microsoft.Extensions.DependencyInjection.ServiceCollection();
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton(services, sp =>
            {
                ConfigureClientDefault(sp, serviceCollection, strategy);
                return new ClientServiceProvider(global::Microsoft.Extensions.DependencyInjection.ServiceCollectionContainerBuilderExtensions.BuildServiceProvider(serviceCollection));
            });
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton(services, sp => new global::Planetwide.Blazor.Ui.Data.Api.State.PlanetwideApiStoreAccessor(global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.IOperationStore>(global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<ClientServiceProvider>(sp)), global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.IEntityStore>(global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<ClientServiceProvider>(sp)), global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.IEntityIdSerializer>(global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<ClientServiceProvider>(sp)), global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::System.Collections.Generic.IEnumerable<global::StrawberryShake.IOperationRequestFactory>>(global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<ClientServiceProvider>(sp)), global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::System.Collections.Generic.IEnumerable<global::StrawberryShake.IOperationResultDataFactory>>(global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<ClientServiceProvider>(sp))));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton(services, sp => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::Planetwide.Blazor.Ui.Data.Api.ListMembersQuery>(global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<ClientServiceProvider>(sp)));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton(services, sp => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::Planetwide.Blazor.Ui.Data.Api.PlanetwideApi>(global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<ClientServiceProvider>(sp)));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton(services, sp => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::Planetwide.Blazor.Ui.Data.Api.IPlanetwideApi>(global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<ClientServiceProvider>(sp)));
            return new global::StrawberryShake.ClientBuilder<global::Planetwide.Blazor.Ui.Data.Api.State.PlanetwideApiStoreAccessor>("PlanetwideApi", services, serviceCollection);
        }

        private static global::Microsoft.Extensions.DependencyInjection.IServiceCollection ConfigureClientDefault(global::System.IServiceProvider parentServices, global::Microsoft.Extensions.DependencyInjection.ServiceCollection services, global::StrawberryShake.ExecutionStrategy strategy = global::StrawberryShake.ExecutionStrategy.NetworkOnly)
        {
            global::Microsoft.Extensions.DependencyInjection.Extensions.ServiceCollectionDescriptorExtensions.TryAddSingleton<global::StrawberryShake.IEntityStore, global::StrawberryShake.EntityStore>(services);
            global::Microsoft.Extensions.DependencyInjection.Extensions.ServiceCollectionDescriptorExtensions.TryAddSingleton<global::StrawberryShake.IOperationStore>(services, sp => new global::StrawberryShake.OperationStore(global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.IEntityStore>(sp)));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.Transport.Http.IHttpConnection>(services, sp =>
            {
                var clientFactory = global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::System.Net.Http.IHttpClientFactory>(parentServices);
                return new global::StrawberryShake.Transport.Http.HttpConnection(() => clientFactory.CreateClient("PlanetwideApi"));
            });
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IEntityMapper<global::Planetwide.Blazor.Ui.Data.Api.State.MemberEntity, global::Planetwide.Blazor.Ui.Data.Api.ListMembers_Members_Nodes_Member>, global::Planetwide.Blazor.Ui.Data.Api.State.ListMembers_Members_Nodes_MemberFromMemberEntityMapper>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IEntityMapper<global::Planetwide.Blazor.Ui.Data.Api.State.AccountEntity, global::Planetwide.Blazor.Ui.Data.Api.ListMembers_Members_Nodes_Accounts_Account>, global::Planetwide.Blazor.Ui.Data.Api.State.ListMembers_Members_Nodes_Accounts_AccountFromAccountEntityMapper>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.Serialization.ISerializer, global::StrawberryShake.Serialization.StringSerializer>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.Serialization.ISerializer, global::StrawberryShake.Serialization.BooleanSerializer>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.Serialization.ISerializer, global::StrawberryShake.Serialization.ByteSerializer>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.Serialization.ISerializer, global::StrawberryShake.Serialization.ShortSerializer>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.Serialization.ISerializer, global::StrawberryShake.Serialization.IntSerializer>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.Serialization.ISerializer, global::StrawberryShake.Serialization.LongSerializer>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.Serialization.ISerializer, global::StrawberryShake.Serialization.FloatSerializer>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.Serialization.ISerializer, global::StrawberryShake.Serialization.DecimalSerializer>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.Serialization.ISerializer, global::StrawberryShake.Serialization.UrlSerializer>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.Serialization.ISerializer, global::StrawberryShake.Serialization.UUIDSerializer>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.Serialization.ISerializer, global::StrawberryShake.Serialization.IdSerializer>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.Serialization.ISerializer, global::StrawberryShake.Serialization.DateTimeSerializer>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.Serialization.ISerializer, global::StrawberryShake.Serialization.DateSerializer>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.Serialization.ISerializer, global::StrawberryShake.Serialization.ByteArraySerializer>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.Serialization.ISerializer, global::StrawberryShake.Serialization.TimeSpanSerializer>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.Serialization.ISerializer, global::StrawberryShake.Serialization.JsonSerializer>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.Serialization.ISerializerResolver>(services, sp => new global::StrawberryShake.Serialization.SerializerResolver(global::System.Linq.Enumerable.Concat(global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::System.Collections.Generic.IEnumerable<global::StrawberryShake.Serialization.ISerializer>>(parentServices), global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::System.Collections.Generic.IEnumerable<global::StrawberryShake.Serialization.ISerializer>>(sp))));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationResultDataFactory<global::Planetwide.Blazor.Ui.Data.Api.IListMembersResult>, global::Planetwide.Blazor.Ui.Data.Api.State.ListMembersResultFactory>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationResultDataFactory>(services, sp => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.IOperationResultDataFactory<global::Planetwide.Blazor.Ui.Data.Api.IListMembersResult>>(sp));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationRequestFactory>(services, sp => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::Planetwide.Blazor.Ui.Data.Api.IListMembersQuery>(sp));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationResultBuilder<global::System.Text.Json.JsonDocument, global::Planetwide.Blazor.Ui.Data.Api.IListMembersResult>, global::Planetwide.Blazor.Ui.Data.Api.State.ListMembersBuilder>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationExecutor<global::Planetwide.Blazor.Ui.Data.Api.IListMembersResult>>(services, sp => new global::StrawberryShake.OperationExecutor<global::System.Text.Json.JsonDocument, global::Planetwide.Blazor.Ui.Data.Api.IListMembersResult>(global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.Transport.Http.IHttpConnection>(sp), () => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.IOperationResultBuilder<global::System.Text.Json.JsonDocument, global::Planetwide.Blazor.Ui.Data.Api.IListMembersResult>>(sp), global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.IOperationStore>(sp), strategy));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::Planetwide.Blazor.Ui.Data.Api.ListMembersQuery>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::Planetwide.Blazor.Ui.Data.Api.IListMembersQuery>(services, sp => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::Planetwide.Blazor.Ui.Data.Api.ListMembersQuery>(sp));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IEntityIdSerializer, global::Planetwide.Blazor.Ui.Data.Api.State.PlanetwideApiEntityIdFactory>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::Planetwide.Blazor.Ui.Data.Api.PlanetwideApi>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::Planetwide.Blazor.Ui.Data.Api.IPlanetwideApi>(services, sp => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::Planetwide.Blazor.Ui.Data.Api.PlanetwideApi>(sp));
            return services;
        }

        private class ClientServiceProvider : System.IServiceProvider, System.IDisposable
        {
            private readonly System.IServiceProvider _provider;
            public ClientServiceProvider(System.IServiceProvider provider)
            {
                _provider = provider;
            }

            public object? GetService(System.Type serviceType)
            {
                return _provider.GetService(serviceType);
            }

            public void Dispose()
            {
                if (_provider is System.IDisposable d)
                {
                    d.Dispose();
                }
            }
        }
    }
}

namespace Planetwide.Blazor.Ui.Data.Api
{
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.9.0.0")]
    public partial class ListMembersResult : global::System.IEquatable<ListMembersResult>, IListMembersResult
    {
        public ListMembersResult(global::Planetwide.Blazor.Ui.Data.Api.IListMembers_Members? members)
        {
            Members = members;
        }

        public global::Planetwide.Blazor.Ui.Data.Api.IListMembers_Members? Members { get; }

        public virtual global::System.Boolean Equals(ListMembersResult? other)
        {
            if (ReferenceEquals(null, other))
            {
                return false;
            }

            if (ReferenceEquals(this, other))
            {
                return true;
            }

            if (other.GetType() != GetType())
            {
                return false;
            }

            return (((Members is null && other.Members is null) || Members != null && Members.Equals(other.Members)));
        }

        public override global::System.Boolean Equals(global::System.Object? obj)
        {
            if (ReferenceEquals(null, obj))
            {
                return false;
            }

            if (ReferenceEquals(this, obj))
            {
                return true;
            }

            if (obj.GetType() != GetType())
            {
                return false;
            }

            return Equals((ListMembersResult)obj);
        }

        public override global::System.Int32 GetHashCode()
        {
            unchecked
            {
                int hash = 5;
                if (Members != null)
                {
                    hash ^= 397 * Members.GetHashCode();
                }

                return hash;
            }
        }
    }

    /// <summary>
    /// A connection to a list of items.
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.9.0.0")]
    public partial class ListMembers_Members_MembersConnection : global::System.IEquatable<ListMembers_Members_MembersConnection>, IListMembers_Members_MembersConnection
    {
        public ListMembers_Members_MembersConnection(global::System.Collections.Generic.IReadOnlyList<global::Planetwide.Blazor.Ui.Data.Api.IListMembers_Members_Nodes>? nodes)
        {
            Nodes = nodes;
        }

        /// <summary>
        /// A flattened list of the nodes.
        /// </summary>
        public global::System.Collections.Generic.IReadOnlyList<global::Planetwide.Blazor.Ui.Data.Api.IListMembers_Members_Nodes>? Nodes { get; }

        public virtual global::System.Boolean Equals(ListMembers_Members_MembersConnection? other)
        {
            if (ReferenceEquals(null, other))
            {
                return false;
            }

            if (ReferenceEquals(this, other))
            {
                return true;
            }

            if (other.GetType() != GetType())
            {
                return false;
            }

            return (global::StrawberryShake.Helper.ComparisonHelper.SequenceEqual(Nodes, other.Nodes));
        }

        public override global::System.Boolean Equals(global::System.Object? obj)
        {
            if (ReferenceEquals(null, obj))
            {
                return false;
            }

            if (ReferenceEquals(this, obj))
            {
                return true;
            }

            if (obj.GetType() != GetType())
            {
                return false;
            }

            return Equals((ListMembers_Members_MembersConnection)obj);
        }

        public override global::System.Int32 GetHashCode()
        {
            unchecked
            {
                int hash = 5;
                if (Nodes != null)
                {
                    foreach (var Nodes_elm in Nodes)
                    {
                        hash ^= 397 * Nodes_elm.GetHashCode();
                    }
                }

                return hash;
            }
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.9.0.0")]
    public partial class ListMembers_Members_Nodes_Member : global::System.IEquatable<ListMembers_Members_Nodes_Member>, IListMembers_Members_Nodes_Member
    {
        public ListMembers_Members_Nodes_Member(global::System.Int32 id, global::System.String? firstname, global::System.String? surname, global::System.Collections.Generic.IReadOnlyList<global::Planetwide.Blazor.Ui.Data.Api.IListMembers_Members_Nodes_Accounts?>? accounts)
        {
            Id = id;
            Firstname = firstname;
            Surname = surname;
            Accounts = accounts;
        }

        public global::System.Int32 Id { get; }

        public global::System.String? Firstname { get; }

        public global::System.String? Surname { get; }

        public global::System.Collections.Generic.IReadOnlyList<global::Planetwide.Blazor.Ui.Data.Api.IListMembers_Members_Nodes_Accounts?>? Accounts { get; }

        public virtual global::System.Boolean Equals(ListMembers_Members_Nodes_Member? other)
        {
            if (ReferenceEquals(null, other))
            {
                return false;
            }

            if (ReferenceEquals(this, other))
            {
                return true;
            }

            if (other.GetType() != GetType())
            {
                return false;
            }

            return (Id == other.Id) && ((Firstname is null && other.Firstname is null) || Firstname != null && Firstname.Equals(other.Firstname)) && ((Surname is null && other.Surname is null) || Surname != null && Surname.Equals(other.Surname)) && global::StrawberryShake.Helper.ComparisonHelper.SequenceEqual(Accounts, other.Accounts);
        }

        public override global::System.Boolean Equals(global::System.Object? obj)
        {
            if (ReferenceEquals(null, obj))
            {
                return false;
            }

            if (ReferenceEquals(this, obj))
            {
                return true;
            }

            if (obj.GetType() != GetType())
            {
                return false;
            }

            return Equals((ListMembers_Members_Nodes_Member)obj);
        }

        public override global::System.Int32 GetHashCode()
        {
            unchecked
            {
                int hash = 5;
                hash ^= 397 * Id.GetHashCode();
                if (Firstname != null)
                {
                    hash ^= 397 * Firstname.GetHashCode();
                }

                if (Surname != null)
                {
                    hash ^= 397 * Surname.GetHashCode();
                }

                if (Accounts != null)
                {
                    foreach (var Accounts_elm in Accounts)
                    {
                        if (Accounts_elm != null)
                        {
                            hash ^= 397 * Accounts_elm.GetHashCode();
                        }
                    }
                }

                return hash;
            }
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.9.0.0")]
    public partial class ListMembers_Members_Nodes_Accounts_Account : global::System.IEquatable<ListMembers_Members_Nodes_Accounts_Account>, IListMembers_Members_Nodes_Accounts_Account
    {
        public ListMembers_Members_Nodes_Accounts_Account(global::System.Int32 id, global::System.String iban, global::System.Decimal balance)
        {
            Id = id;
            Iban = iban;
            Balance = balance;
        }

        public global::System.Int32 Id { get; }

        public global::System.String Iban { get; }

        public global::System.Decimal Balance { get; }

        public virtual global::System.Boolean Equals(ListMembers_Members_Nodes_Accounts_Account? other)
        {
            if (ReferenceEquals(null, other))
            {
                return false;
            }

            if (ReferenceEquals(this, other))
            {
                return true;
            }

            if (other.GetType() != GetType())
            {
                return false;
            }

            return (Id == other.Id) && Iban.Equals(other.Iban) && Balance == other.Balance;
        }

        public override global::System.Boolean Equals(global::System.Object? obj)
        {
            if (ReferenceEquals(null, obj))
            {
                return false;
            }

            if (ReferenceEquals(this, obj))
            {
                return true;
            }

            if (obj.GetType() != GetType())
            {
                return false;
            }

            return Equals((ListMembers_Members_Nodes_Accounts_Account)obj);
        }

        public override global::System.Int32 GetHashCode()
        {
            unchecked
            {
                int hash = 5;
                hash ^= 397 * Id.GetHashCode();
                hash ^= 397 * Iban.GetHashCode();
                hash ^= 397 * Balance.GetHashCode();
                return hash;
            }
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.9.0.0")]
    public partial interface IListMembersResult
    {
        public global::Planetwide.Blazor.Ui.Data.Api.IListMembers_Members? Members { get; }
    }

    /// <summary>
    /// A connection to a list of items.
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.9.0.0")]
    public partial interface IListMembers_Members
    {
        /// <summary>
        /// A flattened list of the nodes.
        /// </summary>
        public global::System.Collections.Generic.IReadOnlyList<global::Planetwide.Blazor.Ui.Data.Api.IListMembers_Members_Nodes>? Nodes { get; }
    }

    /// <summary>
    /// A connection to a list of items.
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.9.0.0")]
    public partial interface IListMembers_Members_MembersConnection : IListMembers_Members
    {
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.9.0.0")]
    public partial interface IListMembers_Members_Nodes
    {
        public global::System.Int32 Id { get; }

        public global::System.String? Firstname { get; }

        public global::System.String? Surname { get; }

        public global::System.Collections.Generic.IReadOnlyList<global::Planetwide.Blazor.Ui.Data.Api.IListMembers_Members_Nodes_Accounts?>? Accounts { get; }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.9.0.0")]
    public partial interface IListMembers_Members_Nodes_Member : IListMembers_Members_Nodes
    {
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.9.0.0")]
    public partial interface IListMembers_Members_Nodes_Accounts
    {
        public global::System.Int32 Id { get; }

        public global::System.String Iban { get; }

        public global::System.Decimal Balance { get; }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.9.0.0")]
    public partial interface IListMembers_Members_Nodes_Accounts_Account : IListMembers_Members_Nodes_Accounts
    {
    }

    /// <summary>
    /// Represents the operation service of the ListMembers GraphQL operation
    /// <code>
    /// query ListMembers {
    ///   members {
    ///     __typename
    ///     nodes {
    ///       __typename
    ///       id
    ///       firstname
    ///       surname
    ///       accounts {
    ///         __typename
    ///         id
    ///         iban
    ///         balance
    ///         ... on Account {
    ///           id
    ///         }
    ///       }
    ///       ... on Member {
    ///         id
    ///       }
    ///     }
    ///   }
    /// }
    /// </code>
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.9.0.0")]
    public partial class ListMembersQueryDocument : global::StrawberryShake.IDocument
    {
        private ListMembersQueryDocument()
        {
        }

        public static ListMembersQueryDocument Instance { get; } = new ListMembersQueryDocument();
        public global::StrawberryShake.OperationKind Kind => global::StrawberryShake.OperationKind.Query;
        public global::System.ReadOnlySpan<global::System.Byte> Body => new global::System.Byte[]{0x71, 0x75, 0x65, 0x72, 0x79, 0x20, 0x4c, 0x69, 0x73, 0x74, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x73, 0x20, 0x7b, 0x20, 0x6d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x73, 0x20, 0x7b, 0x20, 0x5f, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x6e, 0x61, 0x6d, 0x65, 0x20, 0x6e, 0x6f, 0x64, 0x65, 0x73, 0x20, 0x7b, 0x20, 0x5f, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x6e, 0x61, 0x6d, 0x65, 0x20, 0x69, 0x64, 0x20, 0x66, 0x69, 0x72, 0x73, 0x74, 0x6e, 0x61, 0x6d, 0x65, 0x20, 0x73, 0x75, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x20, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x73, 0x20, 0x7b, 0x20, 0x5f, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x6e, 0x61, 0x6d, 0x65, 0x20, 0x69, 0x64, 0x20, 0x69, 0x62, 0x61, 0x6e, 0x20, 0x62, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x20, 0x2e, 0x2e, 0x2e, 0x20, 0x6f, 0x6e, 0x20, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x20, 0x7b, 0x20, 0x69, 0x64, 0x20, 0x7d, 0x20, 0x7d, 0x20, 0x2e, 0x2e, 0x2e, 0x20, 0x6f, 0x6e, 0x20, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x20, 0x7b, 0x20, 0x69, 0x64, 0x20, 0x7d, 0x20, 0x7d, 0x20, 0x7d, 0x20, 0x7d};
        public global::StrawberryShake.DocumentHash Hash { get; } = new global::StrawberryShake.DocumentHash("md5Hash", "d42d404da69f5b85e3a4a175528d0e7b");
        public override global::System.String ToString()
        {
#if NETSTANDARD2_0
        return global::System.Text.Encoding.UTF8.GetString(Body.ToArray());
#else
            return global::System.Text.Encoding.UTF8.GetString(Body);
#endif
        }
    }

    /// <summary>
    /// Represents the operation service of the ListMembers GraphQL operation
    /// <code>
    /// query ListMembers {
    ///   members {
    ///     __typename
    ///     nodes {
    ///       __typename
    ///       id
    ///       firstname
    ///       surname
    ///       accounts {
    ///         __typename
    ///         id
    ///         iban
    ///         balance
    ///         ... on Account {
    ///           id
    ///         }
    ///       }
    ///       ... on Member {
    ///         id
    ///       }
    ///     }
    ///   }
    /// }
    /// </code>
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.9.0.0")]
    public partial class ListMembersQuery : global::Planetwide.Blazor.Ui.Data.Api.IListMembersQuery
    {
        private readonly global::StrawberryShake.IOperationExecutor<IListMembersResult> _operationExecutor;
        public ListMembersQuery(global::StrawberryShake.IOperationExecutor<IListMembersResult> operationExecutor)
        {
            _operationExecutor = operationExecutor ?? throw new global::System.ArgumentNullException(nameof(operationExecutor));
        }

        global::System.Type global::StrawberryShake.IOperationRequestFactory.ResultType => typeof(IListMembersResult);
        public async global::System.Threading.Tasks.Task<global::StrawberryShake.IOperationResult<IListMembersResult>> ExecuteAsync(global::System.Threading.CancellationToken cancellationToken = default)
        {
            var request = CreateRequest();
            return await _operationExecutor.ExecuteAsync(request, cancellationToken).ConfigureAwait(false);
        }

        public global::System.IObservable<global::StrawberryShake.IOperationResult<IListMembersResult>> Watch(global::StrawberryShake.ExecutionStrategy? strategy = null)
        {
            var request = CreateRequest();
            return _operationExecutor.Watch(request, strategy);
        }

        private global::StrawberryShake.OperationRequest CreateRequest()
        {
            return CreateRequest(null);
        }

        private global::StrawberryShake.OperationRequest CreateRequest(global::System.Collections.Generic.IReadOnlyDictionary<global::System.String, global::System.Object?>? variables)
        {
            return new global::StrawberryShake.OperationRequest(id: ListMembersQueryDocument.Instance.Hash.Value, name: "ListMembers", document: ListMembersQueryDocument.Instance, strategy: global::StrawberryShake.RequestStrategy.Default);
        }

        global::StrawberryShake.OperationRequest global::StrawberryShake.IOperationRequestFactory.Create(global::System.Collections.Generic.IReadOnlyDictionary<global::System.String, global::System.Object?>? variables)
        {
            return CreateRequest();
        }
    }

    /// <summary>
    /// Represents the operation service of the ListMembers GraphQL operation
    /// <code>
    /// query ListMembers {
    ///   members {
    ///     __typename
    ///     nodes {
    ///       __typename
    ///       id
    ///       firstname
    ///       surname
    ///       accounts {
    ///         __typename
    ///         id
    ///         iban
    ///         balance
    ///         ... on Account {
    ///           id
    ///         }
    ///       }
    ///       ... on Member {
    ///         id
    ///       }
    ///     }
    ///   }
    /// }
    /// </code>
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.9.0.0")]
    public partial interface IListMembersQuery : global::StrawberryShake.IOperationRequestFactory
    {
        global::System.Threading.Tasks.Task<global::StrawberryShake.IOperationResult<IListMembersResult>> ExecuteAsync(global::System.Threading.CancellationToken cancellationToken = default);
        global::System.IObservable<global::StrawberryShake.IOperationResult<IListMembersResult>> Watch(global::StrawberryShake.ExecutionStrategy? strategy = null);
    }

    /// <summary>
    /// Represents the PlanetwideApi GraphQL client
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.9.0.0")]
    public partial class PlanetwideApi : global::Planetwide.Blazor.Ui.Data.Api.IPlanetwideApi
    {
        private readonly global::Planetwide.Blazor.Ui.Data.Api.IListMembersQuery _listMembers;
        public PlanetwideApi(global::Planetwide.Blazor.Ui.Data.Api.IListMembersQuery listMembers)
        {
            _listMembers = listMembers ?? throw new global::System.ArgumentNullException(nameof(listMembers));
        }

        public static global::System.String ClientName => "PlanetwideApi";
        public global::Planetwide.Blazor.Ui.Data.Api.IListMembersQuery ListMembers => _listMembers;
    }

    /// <summary>
    /// Represents the PlanetwideApi GraphQL client
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.9.0.0")]
    public partial interface IPlanetwideApi
    {
        global::Planetwide.Blazor.Ui.Data.Api.IListMembersQuery ListMembers { get; }
    }
}

namespace Planetwide.Blazor.Ui.Data.Api.State
{
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.9.0.0")]
    public partial class MemberEntity
    {
        public MemberEntity(global::System.Int32 id = default !, global::System.String? firstname = default !, global::System.String? surname = default !, global::System.Collections.Generic.IReadOnlyList<global::StrawberryShake.EntityId?>? accounts = default !)
        {
            Id = id;
            Firstname = firstname;
            Surname = surname;
            Accounts = accounts;
        }

        public global::System.Int32 Id { get; }

        public global::System.String? Firstname { get; }

        public global::System.String? Surname { get; }

        public global::System.Collections.Generic.IReadOnlyList<global::StrawberryShake.EntityId?>? Accounts { get; }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.9.0.0")]
    public partial class AccountEntity
    {
        public AccountEntity(global::System.Int32 id = default !, global::System.String iban = default !, global::System.Decimal balance = default !)
        {
            Id = id;
            Iban = iban;
            Balance = balance;
        }

        public global::System.Int32 Id { get; }

        public global::System.String Iban { get; }

        public global::System.Decimal Balance { get; }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.9.0.0")]
    public partial class ListMembersResultFactory : global::StrawberryShake.IOperationResultDataFactory<global::Planetwide.Blazor.Ui.Data.Api.ListMembersResult>
    {
        private readonly global::StrawberryShake.IEntityStore _entityStore;
        private readonly global::StrawberryShake.IEntityMapper<global::Planetwide.Blazor.Ui.Data.Api.State.MemberEntity, ListMembers_Members_Nodes_Member> _listMembers_Members_Nodes_MemberFromMemberEntityMapper;
        private readonly global::StrawberryShake.IEntityMapper<global::Planetwide.Blazor.Ui.Data.Api.State.AccountEntity, ListMembers_Members_Nodes_Accounts_Account> _listMembers_Members_Nodes_Accounts_AccountFromAccountEntityMapper;
        public ListMembersResultFactory(global::StrawberryShake.IEntityStore entityStore, global::StrawberryShake.IEntityMapper<global::Planetwide.Blazor.Ui.Data.Api.State.MemberEntity, ListMembers_Members_Nodes_Member> listMembers_Members_Nodes_MemberFromMemberEntityMapper, global::StrawberryShake.IEntityMapper<global::Planetwide.Blazor.Ui.Data.Api.State.AccountEntity, ListMembers_Members_Nodes_Accounts_Account> listMembers_Members_Nodes_Accounts_AccountFromAccountEntityMapper)
        {
            _entityStore = entityStore ?? throw new global::System.ArgumentNullException(nameof(entityStore));
            _listMembers_Members_Nodes_MemberFromMemberEntityMapper = listMembers_Members_Nodes_MemberFromMemberEntityMapper ?? throw new global::System.ArgumentNullException(nameof(listMembers_Members_Nodes_MemberFromMemberEntityMapper));
            _listMembers_Members_Nodes_Accounts_AccountFromAccountEntityMapper = listMembers_Members_Nodes_Accounts_AccountFromAccountEntityMapper ?? throw new global::System.ArgumentNullException(nameof(listMembers_Members_Nodes_Accounts_AccountFromAccountEntityMapper));
        }

        global::System.Type global::StrawberryShake.IOperationResultDataFactory.ResultType => typeof(global::Planetwide.Blazor.Ui.Data.Api.IListMembersResult);
        public ListMembersResult Create(global::StrawberryShake.IOperationResultDataInfo dataInfo, global::StrawberryShake.IEntityStoreSnapshot? snapshot = null)
        {
            if (snapshot is null)
            {
                snapshot = _entityStore.CurrentSnapshot;
            }

            if (dataInfo is ListMembersResultInfo info)
            {
                return new ListMembersResult(MapIListMembers_Members(info.Members, snapshot));
            }

            throw new global::System.ArgumentException("ListMembersResultInfo expected.");
        }

        private global::Planetwide.Blazor.Ui.Data.Api.IListMembers_Members? MapIListMembers_Members(global::Planetwide.Blazor.Ui.Data.Api.State.MembersConnectionData? data, global::StrawberryShake.IEntityStoreSnapshot snapshot)
        {
            if (data is null)
            {
                return null;
            }

            IListMembers_Members returnValue = default !;
            if (data?.__typename.Equals("MembersConnection", global::System.StringComparison.Ordinal) ?? false)
            {
                returnValue = new ListMembers_Members_MembersConnection(MapIListMembers_Members_NodesNonNullableArray(data.Nodes, snapshot));
            }
            else
            {
                throw new global::System.NotSupportedException();
            }

            return returnValue;
        }

        private global::System.Collections.Generic.IReadOnlyList<global::Planetwide.Blazor.Ui.Data.Api.IListMembers_Members_Nodes>? MapIListMembers_Members_NodesNonNullableArray(global::System.Collections.Generic.IReadOnlyList<global::StrawberryShake.EntityId>? list, global::StrawberryShake.IEntityStoreSnapshot snapshot)
        {
            if (list is null)
            {
                return null;
            }

            var members = new global::System.Collections.Generic.List<global::Planetwide.Blazor.Ui.Data.Api.IListMembers_Members_Nodes>();
            foreach (global::StrawberryShake.EntityId child in list)
            {
                members.Add(MapNonNullableIListMembers_Members_Nodes(child, snapshot));
            }

            return members;
        }

        private global::Planetwide.Blazor.Ui.Data.Api.IListMembers_Members_Nodes MapNonNullableIListMembers_Members_Nodes(global::StrawberryShake.EntityId entityId, global::StrawberryShake.IEntityStoreSnapshot snapshot)
        {
            if (entityId.Name.Equals("Member", global::System.StringComparison.Ordinal))
            {
                return _listMembers_Members_Nodes_MemberFromMemberEntityMapper.Map(snapshot.GetEntity<global::Planetwide.Blazor.Ui.Data.Api.State.MemberEntity>(entityId) ?? throw new global::StrawberryShake.GraphQLClientException());
            }

            throw new global::System.NotSupportedException();
        }

        private global::System.Collections.Generic.IReadOnlyList<global::Planetwide.Blazor.Ui.Data.Api.IListMembers_Members_Nodes_Accounts?>? MapIListMembers_Members_Nodes_AccountsArray(global::System.Collections.Generic.IReadOnlyList<global::StrawberryShake.EntityId?>? list, global::StrawberryShake.IEntityStoreSnapshot snapshot)
        {
            if (list is null)
            {
                return null;
            }

            var accounts = new global::System.Collections.Generic.List<global::Planetwide.Blazor.Ui.Data.Api.IListMembers_Members_Nodes_Accounts?>();
            foreach (global::StrawberryShake.EntityId? child in list)
            {
                accounts.Add(MapIListMembers_Members_Nodes_Accounts(child, snapshot));
            }

            return accounts;
        }

        private global::Planetwide.Blazor.Ui.Data.Api.IListMembers_Members_Nodes_Accounts? MapIListMembers_Members_Nodes_Accounts(global::StrawberryShake.EntityId? entityId, global::StrawberryShake.IEntityStoreSnapshot snapshot)
        {
            if (entityId is null)
            {
                return null;
            }

            if (entityId.Value.Name.Equals("Account", global::System.StringComparison.Ordinal))
            {
                return _listMembers_Members_Nodes_Accounts_AccountFromAccountEntityMapper.Map(snapshot.GetEntity<global::Planetwide.Blazor.Ui.Data.Api.State.AccountEntity>(entityId.Value) ?? throw new global::StrawberryShake.GraphQLClientException());
            }

            throw new global::System.NotSupportedException();
        }

        global::System.Object global::StrawberryShake.IOperationResultDataFactory.Create(global::StrawberryShake.IOperationResultDataInfo dataInfo, global::StrawberryShake.IEntityStoreSnapshot? snapshot)
        {
            return Create(dataInfo, snapshot);
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.9.0.0")]
    public partial class ListMembersResultInfo : global::StrawberryShake.IOperationResultDataInfo
    {
        private readonly global::System.Collections.Generic.IReadOnlyCollection<global::StrawberryShake.EntityId> _entityIds;
        private readonly global::System.UInt64 _version;
        public ListMembersResultInfo(global::Planetwide.Blazor.Ui.Data.Api.State.MembersConnectionData? members, global::System.Collections.Generic.IReadOnlyCollection<global::StrawberryShake.EntityId> entityIds, global::System.UInt64 version)
        {
            Members = members;
            _entityIds = entityIds ?? throw new global::System.ArgumentNullException(nameof(entityIds));
            _version = version;
        }

        public global::Planetwide.Blazor.Ui.Data.Api.State.MembersConnectionData? Members { get; }

        public global::System.Collections.Generic.IReadOnlyCollection<global::StrawberryShake.EntityId> EntityIds => _entityIds;
        public global::System.UInt64 Version => _version;
        public global::StrawberryShake.IOperationResultDataInfo WithVersion(global::System.UInt64 version)
        {
            return new ListMembersResultInfo(Members, _entityIds, version);
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.9.0.0")]
    public partial class ListMembers_Members_Nodes_MemberFromMemberEntityMapper : global::StrawberryShake.IEntityMapper<global::Planetwide.Blazor.Ui.Data.Api.State.MemberEntity, ListMembers_Members_Nodes_Member>
    {
        private readonly global::StrawberryShake.IEntityStore _entityStore;
        private readonly global::StrawberryShake.IEntityMapper<global::Planetwide.Blazor.Ui.Data.Api.State.AccountEntity, ListMembers_Members_Nodes_Accounts_Account> _listMembers_Members_Nodes_Accounts_AccountFromAccountEntityMapper;
        public ListMembers_Members_Nodes_MemberFromMemberEntityMapper(global::StrawberryShake.IEntityStore entityStore, global::StrawberryShake.IEntityMapper<global::Planetwide.Blazor.Ui.Data.Api.State.AccountEntity, ListMembers_Members_Nodes_Accounts_Account> listMembers_Members_Nodes_Accounts_AccountFromAccountEntityMapper)
        {
            _entityStore = entityStore ?? throw new global::System.ArgumentNullException(nameof(entityStore));
            _listMembers_Members_Nodes_Accounts_AccountFromAccountEntityMapper = listMembers_Members_Nodes_Accounts_AccountFromAccountEntityMapper ?? throw new global::System.ArgumentNullException(nameof(listMembers_Members_Nodes_Accounts_AccountFromAccountEntityMapper));
        }

        public ListMembers_Members_Nodes_Member Map(global::Planetwide.Blazor.Ui.Data.Api.State.MemberEntity entity, global::StrawberryShake.IEntityStoreSnapshot? snapshot = null)
        {
            if (snapshot is null)
            {
                snapshot = _entityStore.CurrentSnapshot;
            }

            return new ListMembers_Members_Nodes_Member(entity.Id, entity.Firstname, entity.Surname, MapIListMembers_Members_Nodes_AccountsArray(entity.Accounts, snapshot));
        }

        private global::System.Collections.Generic.IReadOnlyList<global::Planetwide.Blazor.Ui.Data.Api.IListMembers_Members_Nodes_Accounts?>? MapIListMembers_Members_Nodes_AccountsArray(global::System.Collections.Generic.IReadOnlyList<global::StrawberryShake.EntityId?>? list, global::StrawberryShake.IEntityStoreSnapshot snapshot)
        {
            if (list is null)
            {
                return null;
            }

            var accounts = new global::System.Collections.Generic.List<global::Planetwide.Blazor.Ui.Data.Api.IListMembers_Members_Nodes_Accounts?>();
            foreach (global::StrawberryShake.EntityId? child in list)
            {
                accounts.Add(MapIListMembers_Members_Nodes_Accounts(child, snapshot));
            }

            return accounts;
        }

        private global::Planetwide.Blazor.Ui.Data.Api.IListMembers_Members_Nodes_Accounts? MapIListMembers_Members_Nodes_Accounts(global::StrawberryShake.EntityId? entityId, global::StrawberryShake.IEntityStoreSnapshot snapshot)
        {
            if (entityId is null)
            {
                return null;
            }

            if (entityId.Value.Name.Equals("Account", global::System.StringComparison.Ordinal))
            {
                return _listMembers_Members_Nodes_Accounts_AccountFromAccountEntityMapper.Map(snapshot.GetEntity<global::Planetwide.Blazor.Ui.Data.Api.State.AccountEntity>(entityId.Value) ?? throw new global::StrawberryShake.GraphQLClientException());
            }

            throw new global::System.NotSupportedException();
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.9.0.0")]
    public partial class ListMembers_Members_Nodes_Accounts_AccountFromAccountEntityMapper : global::StrawberryShake.IEntityMapper<global::Planetwide.Blazor.Ui.Data.Api.State.AccountEntity, ListMembers_Members_Nodes_Accounts_Account>
    {
        private readonly global::StrawberryShake.IEntityStore _entityStore;
        public ListMembers_Members_Nodes_Accounts_AccountFromAccountEntityMapper(global::StrawberryShake.IEntityStore entityStore)
        {
            _entityStore = entityStore ?? throw new global::System.ArgumentNullException(nameof(entityStore));
        }

        public ListMembers_Members_Nodes_Accounts_Account Map(global::Planetwide.Blazor.Ui.Data.Api.State.AccountEntity entity, global::StrawberryShake.IEntityStoreSnapshot? snapshot = null)
        {
            if (snapshot is null)
            {
                snapshot = _entityStore.CurrentSnapshot;
            }

            return new ListMembers_Members_Nodes_Accounts_Account(entity.Id, entity.Iban, entity.Balance);
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.9.0.0")]
    public partial class ListMembersBuilder : global::StrawberryShake.IOperationResultBuilder<global::System.Text.Json.JsonDocument, global::Planetwide.Blazor.Ui.Data.Api.IListMembersResult>
    {
        private readonly global::StrawberryShake.IEntityStore _entityStore;
        private readonly global::StrawberryShake.IEntityIdSerializer _idSerializer;
        private readonly global::StrawberryShake.IOperationResultDataFactory<global::Planetwide.Blazor.Ui.Data.Api.IListMembersResult> _resultDataFactory;
        private readonly global::StrawberryShake.Serialization.ILeafValueParser<global::System.Int32, global::System.Int32> _intParser;
        private readonly global::StrawberryShake.Serialization.ILeafValueParser<global::System.String, global::System.String> _stringParser;
        private readonly global::StrawberryShake.Serialization.ILeafValueParser<global::System.Decimal, global::System.Decimal> _decimalParser;
        public ListMembersBuilder(global::StrawberryShake.IEntityStore entityStore, global::StrawberryShake.IEntityIdSerializer idSerializer, global::StrawberryShake.IOperationResultDataFactory<global::Planetwide.Blazor.Ui.Data.Api.IListMembersResult> resultDataFactory, global::StrawberryShake.Serialization.ISerializerResolver serializerResolver)
        {
            _entityStore = entityStore ?? throw new global::System.ArgumentNullException(nameof(entityStore));
            _idSerializer = idSerializer ?? throw new global::System.ArgumentNullException(nameof(idSerializer));
            _resultDataFactory = resultDataFactory ?? throw new global::System.ArgumentNullException(nameof(resultDataFactory));
            _intParser = serializerResolver.GetLeafValueParser<global::System.Int32, global::System.Int32>("Int") ?? throw new global::System.ArgumentException("No serializer for type `Int` found.");
            _stringParser = serializerResolver.GetLeafValueParser<global::System.String, global::System.String>("String") ?? throw new global::System.ArgumentException("No serializer for type `String` found.");
            _decimalParser = serializerResolver.GetLeafValueParser<global::System.Decimal, global::System.Decimal>("Decimal") ?? throw new global::System.ArgumentException("No serializer for type `Decimal` found.");
        }

        public global::StrawberryShake.IOperationResult<IListMembersResult> Build(global::StrawberryShake.Response<global::System.Text.Json.JsonDocument> response)
        {
            (IListMembersResult Result, ListMembersResultInfo Info)? data = null;
            global::System.Collections.Generic.IReadOnlyList<global::StrawberryShake.IClientError>? errors = null;
            if (response.Exception is null)
            {
                try
                {
                    if (response.Body != null)
                    {
                        if (response.Body.RootElement.TryGetProperty("data", out global::System.Text.Json.JsonElement dataElement) && dataElement.ValueKind == global::System.Text.Json.JsonValueKind.Object)
                        {
                            data = BuildData(dataElement);
                        }

                        if (response.Body.RootElement.TryGetProperty("errors", out global::System.Text.Json.JsonElement errorsElement))
                        {
                            errors = global::StrawberryShake.Json.JsonErrorParser.ParseErrors(errorsElement);
                        }
                    }
                }
                catch (global::System.Exception ex)
                {
                    errors = new global::StrawberryShake.IClientError[]{new global::StrawberryShake.ClientError(ex.Message, exception: ex, extensions: new global::System.Collections.Generic.Dictionary<global::System.String, global::System.Object?>{{"body", response.Body?.RootElement.ToString()}})};
                }
            }
            else
            {
                if (response.Body != null && response.Body.RootElement.TryGetProperty("errors", out global::System.Text.Json.JsonElement errorsElement))
                {
                    errors = global::StrawberryShake.Json.JsonErrorParser.ParseErrors(errorsElement);
                }
                else
                {
                    errors = new global::StrawberryShake.IClientError[]{new global::StrawberryShake.ClientError(response.Exception.Message, exception: response.Exception, extensions: new global::System.Collections.Generic.Dictionary<global::System.String, global::System.Object?>{{"body", response.Body?.RootElement.ToString()}})};
                }
            }

            return new global::StrawberryShake.OperationResult<IListMembersResult>(data?.Result, data?.Info, _resultDataFactory, errors);
        }

        private (IListMembersResult, ListMembersResultInfo) BuildData(global::System.Text.Json.JsonElement obj)
        {
            var entityIds = new global::System.Collections.Generic.HashSet<global::StrawberryShake.EntityId>();
            global::StrawberryShake.IEntityStoreSnapshot snapshot = default !;
            global::Planetwide.Blazor.Ui.Data.Api.State.MembersConnectionData? membersId = default !;
            _entityStore.Update(session =>
            {
                membersId = DeserializeIListMembers_Members(session, global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "members"), entityIds);
                snapshot = session.CurrentSnapshot;
            });
            var resultInfo = new ListMembersResultInfo(membersId, entityIds, snapshot.Version);
            return (_resultDataFactory.Create(resultInfo), resultInfo);
        }

        private global::Planetwide.Blazor.Ui.Data.Api.State.MembersConnectionData? DeserializeIListMembers_Members(global::StrawberryShake.IEntityStoreUpdateSession session, global::System.Text.Json.JsonElement? obj, global::System.Collections.Generic.ISet<global::StrawberryShake.EntityId> entityIds)
        {
            if (!obj.HasValue)
            {
                return null;
            }

            var typename = obj.Value.GetProperty("__typename").GetString();
            if (typename?.Equals("MembersConnection", global::System.StringComparison.Ordinal) ?? false)
            {
                return new global::Planetwide.Blazor.Ui.Data.Api.State.MembersConnectionData(typename, nodes: UpdateIListMembers_Members_NodesEntityNonNullableArray(session, global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "nodes"), entityIds));
            }

            throw new global::System.NotSupportedException();
        }

        private global::System.Collections.Generic.IReadOnlyList<global::StrawberryShake.EntityId>? UpdateIListMembers_Members_NodesEntityNonNullableArray(global::StrawberryShake.IEntityStoreUpdateSession session, global::System.Text.Json.JsonElement? obj, global::System.Collections.Generic.ISet<global::StrawberryShake.EntityId> entityIds)
        {
            if (!obj.HasValue)
            {
                return null;
            }

            var members = new global::System.Collections.Generic.List<global::StrawberryShake.EntityId>();
            foreach (global::System.Text.Json.JsonElement child in obj.Value.EnumerateArray())
            {
                members.Add(UpdateNonNullableIListMembers_Members_NodesEntity(session, child, entityIds));
            }

            return members;
        }

        private global::StrawberryShake.EntityId UpdateNonNullableIListMembers_Members_NodesEntity(global::StrawberryShake.IEntityStoreUpdateSession session, global::System.Text.Json.JsonElement? obj, global::System.Collections.Generic.ISet<global::StrawberryShake.EntityId> entityIds)
        {
            if (!obj.HasValue)
            {
                throw new global::System.ArgumentNullException();
            }

            global::StrawberryShake.EntityId entityId = _idSerializer.Parse(obj.Value);
            entityIds.Add(entityId);
            if (entityId.Name.Equals("Member", global::System.StringComparison.Ordinal))
            {
                if (session.CurrentSnapshot.TryGetEntity(entityId, out global::Planetwide.Blazor.Ui.Data.Api.State.MemberEntity? entity))
                {
                    session.SetEntity(entityId, new global::Planetwide.Blazor.Ui.Data.Api.State.MemberEntity(DeserializeNonNullableInt32(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "id")), DeserializeString(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "firstname")), DeserializeString(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "surname")), UpdateIListMembers_Members_Nodes_AccountsEntityArray(session, global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "accounts"), entityIds)));
                }
                else
                {
                    session.SetEntity(entityId, new global::Planetwide.Blazor.Ui.Data.Api.State.MemberEntity(DeserializeNonNullableInt32(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "id")), DeserializeString(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "firstname")), DeserializeString(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "surname")), UpdateIListMembers_Members_Nodes_AccountsEntityArray(session, global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "accounts"), entityIds)));
                }

                return entityId;
            }

            throw new global::System.NotSupportedException();
        }

        private global::System.Int32 DeserializeNonNullableInt32(global::System.Text.Json.JsonElement? obj)
        {
            if (!obj.HasValue)
            {
                throw new global::System.ArgumentNullException();
            }

            return _intParser.Parse(obj.Value.GetInt32()!);
        }

        private global::System.String? DeserializeString(global::System.Text.Json.JsonElement? obj)
        {
            if (!obj.HasValue)
            {
                return null;
            }

            return _stringParser.Parse(obj.Value.GetString()!);
        }

        private global::System.Collections.Generic.IReadOnlyList<global::StrawberryShake.EntityId?>? UpdateIListMembers_Members_Nodes_AccountsEntityArray(global::StrawberryShake.IEntityStoreUpdateSession session, global::System.Text.Json.JsonElement? obj, global::System.Collections.Generic.ISet<global::StrawberryShake.EntityId> entityIds)
        {
            if (!obj.HasValue)
            {
                return null;
            }

            var accounts = new global::System.Collections.Generic.List<global::StrawberryShake.EntityId?>();
            foreach (global::System.Text.Json.JsonElement child in obj.Value.EnumerateArray())
            {
                accounts.Add(UpdateIListMembers_Members_Nodes_AccountsEntity(session, child, entityIds));
            }

            return accounts;
        }

        private global::StrawberryShake.EntityId? UpdateIListMembers_Members_Nodes_AccountsEntity(global::StrawberryShake.IEntityStoreUpdateSession session, global::System.Text.Json.JsonElement? obj, global::System.Collections.Generic.ISet<global::StrawberryShake.EntityId> entityIds)
        {
            if (!obj.HasValue)
            {
                return null;
            }

            global::StrawberryShake.EntityId entityId = _idSerializer.Parse(obj.Value);
            entityIds.Add(entityId);
            if (entityId.Name.Equals("Account", global::System.StringComparison.Ordinal))
            {
                if (session.CurrentSnapshot.TryGetEntity(entityId, out global::Planetwide.Blazor.Ui.Data.Api.State.AccountEntity? entity))
                {
                    session.SetEntity(entityId, new global::Planetwide.Blazor.Ui.Data.Api.State.AccountEntity(DeserializeNonNullableInt32(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "id")), DeserializeNonNullableString(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "iban")), DeserializeNonNullableDecimal(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "balance"))));
                }
                else
                {
                    session.SetEntity(entityId, new global::Planetwide.Blazor.Ui.Data.Api.State.AccountEntity(DeserializeNonNullableInt32(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "id")), DeserializeNonNullableString(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "iban")), DeserializeNonNullableDecimal(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "balance"))));
                }

                return entityId;
            }

            throw new global::System.NotSupportedException();
        }

        private global::System.String DeserializeNonNullableString(global::System.Text.Json.JsonElement? obj)
        {
            if (!obj.HasValue)
            {
                throw new global::System.ArgumentNullException();
            }

            return _stringParser.Parse(obj.Value.GetString()!);
        }

        private global::System.Decimal DeserializeNonNullableDecimal(global::System.Text.Json.JsonElement? obj)
        {
            if (!obj.HasValue)
            {
                throw new global::System.ArgumentNullException();
            }

            return _decimalParser.Parse(obj.Value.GetDecimal()!);
        }
    }

    ///<summary>A connection to a list of items.</summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.9.0.0")]
    public partial class MembersConnectionData
    {
        public MembersConnectionData(global::System.String __typename, global::System.Collections.Generic.IReadOnlyList<global::StrawberryShake.EntityId>? nodes = default !)
        {
            this.__typename = __typename ?? throw new global::System.ArgumentNullException(nameof(__typename));
            Nodes = nodes;
        }

        public global::System.String __typename { get; }

        ///<summary>A flattened list of the nodes.</summary>
        public global::System.Collections.Generic.IReadOnlyList<global::StrawberryShake.EntityId>? Nodes { get; }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.9.0.0")]
    public partial class PlanetwideApiEntityIdFactory : global::StrawberryShake.IEntityIdSerializer
    {
        private static readonly global::System.Text.Json.JsonWriterOptions _options = new global::System.Text.Json.JsonWriterOptions()
        {Indented = false};
        public global::StrawberryShake.EntityId Parse(global::System.Text.Json.JsonElement obj)
        {
            global::System.String __typename = obj.GetProperty("__typename").GetString()!;
            return __typename switch
            {
                "Member" => ParseMemberEntityId(obj, __typename),
                "Account" => ParseAccountEntityId(obj, __typename),
                _ => throw new global::System.NotSupportedException()};
        }

        public global::System.String Format(global::StrawberryShake.EntityId entityId)
        {
            return entityId.Name switch
            {
                "Member" => FormatMemberEntityId(entityId),
                "Account" => FormatAccountEntityId(entityId),
                _ => throw new global::System.NotSupportedException()};
        }

        private global::StrawberryShake.EntityId ParseMemberEntityId(global::System.Text.Json.JsonElement obj, global::System.String type)
        {
            return new global::StrawberryShake.EntityId(type, obj.GetProperty("id").GetInt32()!);
        }

        private global::System.String FormatMemberEntityId(global::StrawberryShake.EntityId entityId)
        {
            using var writer = new global::StrawberryShake.Internal.ArrayWriter();
            using var jsonWriter = new global::System.Text.Json.Utf8JsonWriter(writer, _options);
            jsonWriter.WriteStartObject();
            jsonWriter.WriteString("__typename", entityId.Name);
            jsonWriter.WriteNumber("id", (global::System.Int32)entityId.Value);
            jsonWriter.WriteEndObject();
            jsonWriter.Flush();
            return global::System.Text.Encoding.UTF8.GetString(writer.GetInternalBuffer(), 0, writer.Length);
        }

        private global::StrawberryShake.EntityId ParseAccountEntityId(global::System.Text.Json.JsonElement obj, global::System.String type)
        {
            return new global::StrawberryShake.EntityId(type, obj.GetProperty("id").GetInt32()!);
        }

        private global::System.String FormatAccountEntityId(global::StrawberryShake.EntityId entityId)
        {
            using var writer = new global::StrawberryShake.Internal.ArrayWriter();
            using var jsonWriter = new global::System.Text.Json.Utf8JsonWriter(writer, _options);
            jsonWriter.WriteStartObject();
            jsonWriter.WriteString("__typename", entityId.Name);
            jsonWriter.WriteNumber("id", (global::System.Int32)entityId.Value);
            jsonWriter.WriteEndObject();
            jsonWriter.Flush();
            return global::System.Text.Encoding.UTF8.GetString(writer.GetInternalBuffer(), 0, writer.Length);
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.9.0.0")]
    public partial class PlanetwideApiStoreAccessor : global::StrawberryShake.StoreAccessor
    {
        public PlanetwideApiStoreAccessor(global::StrawberryShake.IOperationStore operationStore, global::StrawberryShake.IEntityStore entityStore, global::StrawberryShake.IEntityIdSerializer entityIdSerializer, global::System.Collections.Generic.IEnumerable<global::StrawberryShake.IOperationRequestFactory> requestFactories, global::System.Collections.Generic.IEnumerable<global::StrawberryShake.IOperationResultDataFactory> resultDataFactories) : base(operationStore, entityStore, entityIdSerializer, requestFactories, resultDataFactories)
        {
        }
    }
}
