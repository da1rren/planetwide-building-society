@implements IDisposable
@inject PlanetwideApi _planetwideApi

<table class="table table-striped">
    <thead>
    <tr>
        <td>Id</td>
        <td>Firstname</td>
        <td>Surname</td>
        <td>Number of Accounts</td>
        <td>Total Balance</td>
    </tr>
    </thead>
    <tbody>
    @if (_members?.Any() ?? false)
    {
        foreach (var member in _members)
        {
            <tr>
                <td>@member.Id</td>
                <td>@member.Firstname</td>
                <td>@member.Surname</td>
                <td>@member?.Accounts?.Count</td>
                <td>@member?.Accounts?.Sum(x => x?.Balance)</td>
            </tr>
        }
    }
    </tbody>
</table>

@code {
    private IDisposable? _obserable;
    private IReadOnlyList<IListMembers_Members_Nodes>? _members;

    protected override Task OnInitializedAsync()
    {
        _obserable = _planetwideApi.ListMembers
            .Watch(StrawberryShake.ExecutionStrategy.CacheAndNetwork)
            .Where(t => !t.Errors.Any())
            .Subscribe(result =>
            {
                _members = result.Data?.Members?.Nodes;
                StateHasChanged();
            });

        return base.OnInitializedAsync();
    }

    public void Dispose()
    {
        _obserable?.Dispose();
    }

}