name: "Plantwide Build"
on: [push]

env:
  DOCKER_BUILDKIT: 1
  COMPOSE_DOCKER_CLI_BUILD: 1
  TAG: "${{ github.run_id }}${{ github.run_number }}"

jobs:
  Dotnet-Build:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        dotnet-version: ["6.0.x"]
    defaults:
      run:
        working-directory: src/api
    steps:
      - uses: actions/checkout@v2

      - name: Setup .NET Core SDK ${{ matrix.dotnet-version }}
        uses: actions/setup-dotnet@v1.7.2
        with:
          dotnet-version: ${{ matrix.dotnet-version }}

      - name: Install dependencies
        run: dotnet restore

      - name: Build
        run: dotnet build --configuration Release --no-restore

  Docker-Compose-Build:
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: src/api
    steps:
      - uses: actions/checkout@v2

      - name: login to GitHub Container Registry
        uses: docker/login-action@v1
        with:
          registry: ghcr.io
          username: ${GITHUB_ACTOR}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Docker Compose Build
        run: docker compose build --build-arg BUILDKIT_INLINE_CACHE=1
        env:
          TAG: ${{ env.TAG }}

      - name: Docker Compose Push
        run: docker compose push
        env:
          TAG: ${{ env.TAG }}

      # todo make this better
      - name: Docker Compose Build
        run: docker compose build --build-arg BUILDKIT_INLINE_CACHE=1
        env:
          TAG: latest

      - name: Docker Compose Push
        run: docker compose push
        env:
          TAG: latest

  Deploy-To-Minikube:
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: deployment/charts/planetwide
    steps:
      - uses: actions/checkout@v2

      - name: Start Minikube
        id: minikube
        uses: medyagh/setup-minikube@master

      - name: Check Minikube
        run: |
          kubectl cluster-info

      - name: Deploy Chart
        run: |
          helm install planetwide . --namespace planetwide --create-namespace --wait

      - name: Get Pod Status
        if: always()
        run: |
          kubectl get pods -n planetwide

  Deploy-Charts:
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: deployment/charts/planetwide
    steps:
      - uses: actions/checkout@v2

      - name: Install Helm
        uses: azure/setup-helm@v1

      - name: Publish Charts
        uses: helm/chart-releaser-action@v1.4.0
        with:
          charts_dir: deployment/charts/planetwide
        env:
          CR_TOKEN: "${{ secrets.GITHUB_TOKEN }}"


  Deploy-Gloo-To-Kind-Cluster:
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: deployment/cluster/gloo-edge
    steps:
      - uses: actions/checkout@v2

      - name: Build Gloo Cluster
        env:
          GLOO_TOKEN: ${{ secrets.GLOO_TOKEN }}
        run: |
          curl -sL https://run.solo.io/gloo/install | sh
          export PATH=$HOME/.gloo/bin:$PATH

          make cluster

      - name: Test Cluster
        timeout-minutes: 5
        run: |
          # Swith to use --retry-all-errors once curl is updated to >7.71.0
          curl --version

          until contents=$(curl http://localhost:31000/health --retry 10 --retry-delay 5 --max-time 10 --retry-connrefused)
          do
            break
          done

          echo $contents

          
