
name: "Plantwide Build"
on: [push]

env:
  DOCKER_BUILDKIT: 1
  COMPOSE_DOCKER_CLI_BUILD: 1

jobs:
  Dotnet-Build:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        dotnet-version: ["6.0.x"]
    defaults:
      run:
        working-directory: src/api
    steps:
      - uses: actions/checkout@v2
        
      - name: Setup .NET Core SDK ${{ matrix.dotnet-version }}
        uses: actions/setup-dotnet@v1.7.2
        with:
          dotnet-version: ${{ matrix.dotnet-version }}

      - name: Install dependencies
        run: dotnet restore

      - name: Build
        run: dotnet build --configuration Release --no-restore

  Docker-Compose-Build:
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: src/api
    steps:
      - uses: actions/checkout@v2

      - name: login to GitHub Container Registry
        uses: docker/login-action@v1
        with:
          registry: ghcr.io
          username: ${GITHUB_ACTOR}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Docker meta
        id: meta
        uses: docker/metadata-action@v4
        with:
          images: |
            ghcr.io/${GITHUB_ACTOR}/planetwide-gateway
            ghcr.io/${GITHUB_ACTOR}/planetwide-accounts-api
            ghcr.io/${GITHUB_ACTOR}/planetwide-members-api
            ghcr.io/${GITHUB_ACTOR}/planetwide-transactions-api
            ghcr.io/${GITHUB_ACTOR}/planetwide-prompts-api
          flavour: |
            latest=true
            type=ref,event=branch
            type=ref,event=pr
            type=sha

      - name: Docker Compose Build
        run: docker compose build --build-arg BUILDKIT_INLINE_CACHE=1

      - name: Docker Compose Push
        run: docker compose push

  Deploy-To-Minikube:
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: deployment/planetwide
    steps:
      - uses: actions/checkout@v2

      - name: start minikube
        id: minikube
        uses: medyagh/setup-minikube@master

      - name: Deploy Chart
        run: |
          helm install planetwide . --namespace planetwide --create-namespace --wait
